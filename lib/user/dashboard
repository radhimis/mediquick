import 'package:flutter/material.dart';

class HomeDashboard extends StatelessWidget {
  const HomeDashboard({super.key});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.white,
      body: SafeArea(
        child: Stack(
          children: [
            // Top Wave
            Positioned(
              top: 0,
              left: 0,
              right: 0,
              child: SizedBox(
                height: 180,
                child: CustomPaint(
                  painter: TopWavePainter(),
                ),
              ),
            ),

            // Bottom Wave
            Positioned(
              bottom: 0,
              left: 0,
              right: 0,
              child: SizedBox(
                height: 130,
                child: CustomPaint(
                  painter: BottomWavePainter(),
                ),
              ),
            ),

            Padding(
              padding: const EdgeInsets.symmetric(horizontal: 20),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  const SizedBox(height: 30),
                  // Emergency Button
                  Center(
                    child: ElevatedButton.icon(
                      onPressed: () {
                        // Handle emergency action here
                      },
                      icon: const Icon(Icons.warning_amber_rounded, size: 30),
                      label: const Text(
                        'EMERGENCY',
                        style: TextStyle(
                          fontSize: 20,
                          fontWeight: FontWeight.bold,
                        ),
                      ),
                      style: ElevatedButton.styleFrom(
                        primary: const Color(0xFF8D72E1),
                        padding: const EdgeInsets.symmetric(
                            horizontal: 40, vertical: 14),
                        shape: RoundedRectangleBorder(
                          borderRadius: BorderRadius.circular(40),
                        ),
                        elevation: 10,
                        shadowColor: Colors.deepPurpleAccent,
                      ),
                    ),
                  ),

                  const SizedBox(height: 30),

                  // Search Bar
                  _RoundedInputField(
                    hintText: 'Search medicines or pharmacies',
                    icon: Icons.search,
                    obscureText: false,
                  ),

                  const SizedBox(height: 30),

                  const Text(
                    'Categories',
                    style: TextStyle(fontSize: 22, fontWeight: FontWeight.bold),
                  ),

                  const SizedBox(height: 20),

                  // Categories Grid
                  Expanded(
                    child: GridView.count(
                      crossAxisCount: 2,
                      mainAxisSpacing: 20,
                      crossAxisSpacing: 15,
                      childAspectRatio: 3 / 2,
                      children: const [
                        _CategoryCard(
                          title: 'All Medicines',
                          icon: Icons.local_pharmacy,
                        ),
                        _CategoryCard(
                          title: 'Prescription',
                          icon: Icons.description,
                        ),
                        _CategoryCard(
                          title: 'First Aid',
                          icon: Icons.medical_services,
                        ),
                        _CategoryCard(
                          title: 'Vitamins',
                          icon: Icons.health_and_safety,
                        ),
                        _CategoryCard(
                          title: 'Baby Care',
                          icon: Icons.child_care,
                        ),
                        _CategoryCard(
                          title: 'Health Devices',
                          icon: Icons.monitor_heart,
                        ),
                      ],
                    ),
                  ),
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }
}

class _RoundedInputField extends StatelessWidget {
  final String hintText;
  final IconData icon;
  final bool obscureText;

  const _RoundedInputField({
    required this.hintText,
    required this.icon,
    required this.obscureText,
  });

  @override
  Widget build(BuildContext context) {
    return Container(
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(30),
        boxShadow: const [
          BoxShadow(
            color: Colors.black12,
            blurRadius: 12,
            offset: Offset(0, 6),
          ),
        ],
      ),
      child: TextField(
        obscureText: obscureText,
        decoration: InputDecoration(
          prefixIcon: Icon(icon, color: Colors.black38),
          hintText: hintText,
          hintStyle: const TextStyle(color: Colors.black38),
          border: InputBorder.none,
          contentPadding:
              const EdgeInsets.symmetric(vertical: 18, horizontal: 20),
        ),
      ),
    );
  }
}

class _CategoryCard extends StatelessWidget {
  final String title;
  final IconData icon;

  const _CategoryCard({required this.title, required this.icon});

  @override
  Widget build(BuildContext context) {
    return Card(
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(20)),
      elevation: 4,
      child: InkWell(
        borderRadius: BorderRadius.circular(20),
        onTap: () {
          // Handle category tap here
        },
        child: Padding(
          padding: const EdgeInsets.all(16.0),
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              Icon(icon, size: 48, color: const Color(0xFF8D72E1)),
              const SizedBox(height: 12),
              Text(title,
                  style: const TextStyle(
                      fontSize: 18, fontWeight: FontWeight.w600)),
            ],
          ),
        ),
      ),
    );
  }
}

// Custom Painters for gradient header/footer

class TopWavePainter extends CustomPainter {
  @override
  void paint(Canvas canvas, Size size) {
    final Paint paint = Paint()
      ..shader = const LinearGradient(
        colors: [Color(0xFF98C0FF), Color(0xFF8D72E1)],
        begin: Alignment.topLeft,
        end: Alignment.bottomRight,
      ).createShader(Rect.fromLTWH(0, 0, size.width, size.height));

    final Path path = Path()
      ..lineTo(0, size.height * 0.8)
      ..quadraticBezierTo(
        size.width * 0.25, size.height,
        size.width * 0.5, size.height * 0.8,
      )
      ..quadraticBezierTo(
        size.width * 0.75, size.height * 0.6,
        size.width, size.height * 0.8,
      )
      ..lineTo(size.width, 0)
      ..close();

    canvas.drawPath(path, paint);
  }

  @override
  bool shouldRepaint(CustomPainter oldDelegate) => false;
}

class BottomWavePainter extends CustomPainter {
  @override
  void paint(Canvas canvas, Size size) {
    final Paint paint = Paint()
      ..shader = const LinearGradient(
        colors: [Color(0xFF8D72E1), Color(0xFF98C0FF)],
        begin: Alignment.bottomRight,
        end: Alignment.topLeft,
      ).createShader(Rect.fromLTWH(0, 0, size.width, size.height));

    final Path path = Path()
      ..moveTo(0, 0)
      ..quadraticBezierTo(
        size.width * 0.25, size.height * 0.5,
        size.width * 0.5, size.height * 0.3,
      )
      ..quadraticBezierTo(
        size.width * 0.75, size.height * 0.1,
        size.width, size.height * 0.25,
      )
      ..lineTo(size.width, size.height)
      ..lineTo(0, size.height)
      ..close();

    canvas.drawPath(path, paint);
  }

  @override
  bool shouldRepaint(CustomPainter oldDelegate) => false;
}
